program quicksort;
var
    ARR: array [0..255] of integer;
    lo,hi: integer;
    i,j: integer;
    prev: integer;
    temp: integer;
    pivot: integer;
    shouldkeepswapping: boolean;
    stack: array [0..511] of integer;
    stacktop: integer;


procedure modulo(a: integer; b: integer; var out: integer);
begin
    out := a;
    while out >= b do
    begin
        out := out - b
    end
end;

begin
    {Linear congruential generator}
    prev := 56;
    ARR[0] := 56;
    i := 1;
    while i < 256 do
    begin
        temp := 113 * ARR[i - 1] + 11;
        modulo(temp, 256, prev);
        ARR[i] := prev;
        i := i + 1
    end;

    {Print array}
    write('Before sort:');
    writeln;
    i := 0;
    while i < 256 do
    begin
        write(ARR[i]);
        writeln;
        i := i + 1
    end;

    {Quicksort, cheating by using a stack of (lo,hi) because
     we can't pass arrays around or access globals from procedures}
    stacktop := 1;
    stack[0] := 0;
    stack[1] := 255;
    while stacktop >= 0 do
    begin
        lo := stack[stacktop - 1];
        hi := stack[stacktop];
        stacktop := stacktop - 2;
        i := lo;
        j := hi;
        pivot := ARR[(hi + lo) div 2];
        
        {Partition}
        shouldkeepswapping := true;
        while shouldkeepswapping do
        begin
            while pivot > ARR[i] do
            begin
                i := i + 1
            end;
            while pivot < ARR[j] do
            begin
                j := j - 1
            end;
            if i <= j then
            begin
                temp := ARR[i];
                ARR[i] := ARR[j];
                ARR[j] := temp;
                j := j - 1;
                i := i + 1
            end;
            if i > j then
            begin
                shouldkeepswapping := false;
            end;
        end;

        if lo < j then 
        begin
            {quicksort(lo, j)}
            stacktop := stacktop + 2;
            stack[stacktop - 1] := lo;
            stack[stacktop] := j
        end;

        if i < hi then
        begin
            {quicksort(i, hi)}
            stacktop := stacktop + 2;
            stack[stacktop - 1] := i;
            stack[stacktop] := hi
        end
    end;

    {Print array}
    i := 0;
    write('After sort:');
    writeln;
    while i < 256 do
    begin
        write(ARR[i]);
        writeln;
        i := i + 1
    end
end.
